---
layout: page
title: "Aho-Corasick法"
comments: true
sharing: true
---
  
#### 基本情報
  
***

計算量 | {% m %}O(N+M){% em %}
用途| 入力文字列に対してマッチするパターンを検索  
  
N := 入力文字列の長さ  
M := パターンの文字列の長さの合計  

  
#### 解説

***

2018-02-03: 図が間違っていたため修正  
  
まず各パターンからトライ木を作成する.    
トライ木というのは例えば6つの文字列{a, ab, aca, ba, c, cab}に対して以下のような木のこと.  
![trie_tree](/images/trie_tree.jpg)  
この木は文字列の頭に{a, ab, aca, ba, c, cab}に一致するものがあるか根から順に追うことで調べることができる.  
例えabcという文字列はroot->a->abまでいけるのでaとabが先頭にあることがわかる.  
Aho-Corasick法では, このトライ木を利用してで入力文字列の連続している部分文字列にパターンに一致するものがあるか, またそれは何かを文字列を先頭から順に見るだけで調べることを可能にする.  
  
トライ木の各ノードまでで構成される文字列について, その文字列の末尾と一致するノードのうち長さが最大のノードに辺を張る. もし存在しなければルートに張ることになる.  
これは幅優先探索によって容易に実装できる. 以下はそれらの辺を張った後のトライ木. またパターンと一致するノードを灰色に塗ってある.  
![suffix_link](/images/suffix_link.png)  
しかしこのままだと短い文字列に一致していてもわからない場合があるので(例えばcabまで一致したとき, abに辺を張るがaには張らないので見落とす), 各ノードはその祖先が一致した文字列の情報も持つようにする.  


#### コード

***

{% include_code algorithm/aho_corasick.cpp %}



#### 問題

***  

{% for post in site.tags['aho-corasick'] %}
* [{{post.title | cdata_escape}}]({{post.url}})
{% endfor %}

