---
layout: post
title: "Typical DP Contest O - 文字列"
date: 2015-09-10 19:37:03 +0900
comments: true
category: TDPC
tags: [dp]
---

[O - 文字列](http://tdpc.contest.atcoder.jp/tasks/tdpc_string)

#### 問題概要

****

#### 解法

****

基本的に文字の間をみていく．その両側が同じ文字ならダメ．違う文字ならok．  
  
dp\[i\]\[j\] := i番目のアルファベットまでやって同じ文字が隣り合う場所がj箇所あるときの場合の数  
  
0個の文字はいらないので取り除く  
i番目までの総文字数をsum\[i+1\]とする  
  
i番目のアルファベットでダメな場所がj個のときいい場所はsum\[i\]+1-j個．  
次にそのときのdpの更新．  
freq\[i\]個の文字を何分割かしていい場所とダメな場所に入れていくことを考える．  
分割数をkとして，ダメな場所にl個入れるとき，いい場所に入れる個数はk-l個．  
この操作をしたとき，次のダメな場所の個数はj-l+freq\[i\]-k．あとは入れる場所の組合せを掛けあわせれば良い．  
つまり，

{% math %}

dp[i][j]*{}_{freq[i]-1}C_{k-1}*{}_{j}C_{l}*{}_{sum[i]+1-j}C_{k-l}

{% endmath %}

をdp\[i+1\]\[j-l+freq\[i\]-k\]に加える．

#### コード

****

{% include_code TDPC/O.cpp %}
