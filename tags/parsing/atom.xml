<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: parsing | Algoogle]]></title>
  <link href="http://algoogle.hadrori.jp/tags/parsing/atom.xml" rel="self"/>
  <link href="http://algoogle.hadrori.jp/"/>
  <updated>2014-05-11T17:53:30+09:00</updated>
  <id>http://algoogle.hadrori.jp/</id>
  <author>
    <name><![CDATA[hadrori]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ 1244 Molecular Formula]]></title>
    <link href="http://algoogle.hadrori.jp/AOJ/1244/"/>
    <updated>2014-05-11T00:24:06+09:00</updated>
    <id>http://algoogle.hadrori.jp/AOJ/1244</id>
    <content type="html"><![CDATA[<p><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1244">Molecular Formula</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>原子量のリストが渡される.<br />
分子のリストを渡すのでそれぞれの重さを求めよ. リストにない原子が出てくる場合は場合はUNKNOWNを出力しろ.</p>

<h4 id="section-1">解法</h4>

<hr />

<p>基本的には分子の文字列を頭から見ていけば基本的には,<br />
原子, 数字, 原子, 数字<br />
と並んでいる(数字の長さは0から2, 原子の長さは1か2).<br />
例外としてその原子の部分に括弧でくくられた分子が来ることがあるが中身は同じ構造なので再帰的にやればよい.  </p>

<h4 id="section-2">コード</h4>

<hr />

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (1244.cpp)</span> <a href='/downloads/code/AOJ/1244.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;bits/stdc++.h&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="cp">#define repi(i,a,b) for(int i = (a); i &lt; (b); i++)</span>
</span><span class='line'><span class="cp">#define rep(i,a) repi(i,0,a)</span>
</span><span class='line'><span class="cp">#define all(u) begin(u),end(u)</span>
</span><span class='line'><span class="cp">#define pb push_back</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">inf</span> <span class="o">=</span> <span class="mf">1e9</span><span class="p">;</span>
</span><span class='line'><span class="n">string</span> <span class="n">seq</span><span class="p">;</span>
</span><span class='line'><span class="n">map</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">w</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">cur</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">num</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">cur</span> <span class="o">&lt;</span> <span class="n">seq</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="n">and</span> <span class="n">isdigit</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">cur</span><span class="p">]))</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="mi">10</span><span class="o">*</span><span class="n">ret</span><span class="o">+</span><span class="n">seq</span><span class="p">[</span><span class="n">cur</span><span class="o">++</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">atm</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">a</span> <span class="o">=</span> <span class="n">seq</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">cur</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">cur</span> <span class="o">&lt;</span> <span class="n">seq</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="n">and</span> <span class="n">islower</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">cur</span><span class="p">]))</span>
</span><span class='line'>        <span class="n">a</span><span class="p">.</span><span class="n">pb</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">cur</span><span class="o">++</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">w</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">it</span> <span class="o">==</span> <span class="n">end</span><span class="p">(</span><span class="n">w</span><span class="p">))</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">mol</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">cur</span> <span class="o">==</span> <span class="n">seq</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;)&#39;</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;(&#39;</span><span class="p">){</span>
</span><span class='line'>        <span class="o">++</span><span class="n">cur</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="n">mol</span><span class="p">();</span>
</span><span class='line'>        <span class="o">++</span><span class="n">cur</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">*=</span> <span class="n">num</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">mol</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">d</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ret</span><span class="o">+</span><span class="n">d</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">ret</span> <span class="o">=</span> <span class="n">atm</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ret</span> <span class="o">*=</span> <span class="n">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">num</span><span class="p">());</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">mol</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">d</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="o">+</span><span class="n">d</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">solve</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">seq</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">seq</span> <span class="o">==</span> <span class="s">&quot;0&quot;</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="n">cur</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">mol</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">ans</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">puts</span><span class="p">(</span><span class="s">&quot;UNKNOWN&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ans</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">input</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">s</span> <span class="o">==</span> <span class="s">&quot;END_OF_FIRST_PART&quot;</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">d</span><span class="p">;</span> <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>        <span class="n">w</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">signed</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">input</span><span class="p">();</span>
</span><span class='line'>    <span class="n">solve</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ 2570 Shipura]]></title>
    <link href="http://algoogle.hadrori.jp/AOJ/2570/"/>
    <updated>2014-05-10T01:28:08+09:00</updated>
    <id>http://algoogle.hadrori.jp/AOJ/2570</id>
    <content type="html"><![CDATA[<p><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2570">Shipura</a></p>

<h4 id="section">問題概要</h4>

<hr />

<h4 id="section-1">解法</h4>

<hr />

<p>数字か’S’の前の’&gt;’は必ずシフト演算なので, それらをまず検出して別の記号に替えておく. 今回は$
頭から構文解析していくのは演算の順番的にもなんかつらいので, 後ろから再帰的にやるのが楽でよい.<br />
右から順に見ていくようにcurを定める.<br />
exprは後ろから見たら必ずtermが最初に現れるのでそのままとりあえずtermを呼ぶ.<br />
戻ってきたら, もし’&lt;’だったらそのまま返す(termに呼ばれたexprなので). そうじゃなければ’$’のはずなのでcurを一個進めてさらにexprを呼んだ結果を前のtermの結果分シフトして返す.<br />
termは後ろから見たら数字か’&gt;’なので’&gt;’だったらcurを1個進めてexprを呼ぶ. 戻ってきたら”S&lt;”の文だけcurを進める. 数字だったらnumberを呼ぶ.<br />
numberは数値を返すだけ.  </p>

<p>シフトする時にいっぱいシフトしちゃうと変な数が出てきちゃうので, ある程度で0になることを利用して, 最大でも31ぐらいまでしかシフトしないようにする.  </p>

<h4 id="section-2">コード</h4>

<hr />

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (2570.cpp)</span> <a href='/downloads/code/AOJ/2570.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define int long long</span>
</span><span class='line'><span class="cp">#define repi(i,a,b) for(int i = (a); i &lt; (b); i++)</span>
</span><span class='line'><span class="cp">#define rep(i,a) repi(i,0,a)</span>
</span><span class='line'><span class="cp">#define all(u) (u).begin(),(u).end()</span>
</span><span class='line'><span class="cp">#define pb push_back</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">string</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">cur</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">mod</span> <span class="o">=</span> <span class="mi">1000000007</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">input</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">str</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>    <span class="n">cur</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">tmp</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">tmp</span> <span class="o">==</span> <span class="s">&quot;#&quot;</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="n">c</span> <span class="o">:</span> <span class="n">tmp</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="n">c</span> <span class="o">!=</span> <span class="sc">&#39; &#39;</span><span class="p">)</span> <span class="n">str</span><span class="p">.</span><span class="n">pb</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">convert</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">repi</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">str</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(((</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">&#39;0&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="sc">&#39;9&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;S&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>           <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;&gt;&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;&gt;&#39;</span><span class="p">){</span>
</span><span class='line'>            <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;$&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">str</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">str</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">number</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">cur</span> <span class="o">&lt;</span> <span class="n">str</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">&#39;0&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="sc">&#39;9&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">ret</span><span class="p">.</span><span class="n">pb</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">cur</span><span class="o">++</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">reverse</span><span class="p">(</span><span class="n">all</span><span class="p">(</span><span class="n">ret</span><span class="p">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">atoi</span><span class="p">(</span><span class="n">ret</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">expr</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">term</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;&gt;&#39;</span><span class="p">){</span>
</span><span class='line'>        <span class="n">cur</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">expr</span><span class="p">();</span>
</span><span class='line'>        <span class="n">cur</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">t</span> <span class="o">*</span> <span class="n">t</span> <span class="o">%</span> <span class="n">mod</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">return</span> <span class="n">number</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">expr</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">term</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">cur</span> <span class="o">&gt;=</span> <span class="n">str</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="k">return</span> <span class="n">right</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;&lt;&#39;</span><span class="p">)</span>  <span class="k">return</span> <span class="n">right</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="n">cur</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">expr</span><span class="p">()</span> <span class="o">&gt;&gt;</span> <span class="n">min</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="mi">31LL</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">solve</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">convert</span><span class="p">();</span>
</span><span class='line'>    <span class="n">reverse</span><span class="p">(</span><span class="n">all</span><span class="p">(</span><span class="n">str</span><span class="p">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">expr</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">signed</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">input</span><span class="p">()){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">solve</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

]]></content>
  </entry>
  
</feed>
