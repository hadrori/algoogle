<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Graph | Algoogle]]></title>
  <link href="http://algoogle.hadrori.jp/categories/graph/atom.xml" rel="self"/>
  <link href="http://algoogle.hadrori.jp/"/>
  <updated>2014-04-28T18:52:52+09:00</updated>
  <id>http://algoogle.hadrori.jp/</id>
  <author>
    <name><![CDATA[hadrori]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Warshall-Floyd法]]></title>
    <link href="http://algoogle.hadrori.jp/warshall-floydfa/"/>
    <updated>2014-04-28T00:00:00+09:00</updated>
    <id>http://algoogle.hadrori.jp/warshall-floydfa</id>
    <content type="html"><![CDATA[<h4 id="section">基本情報</h4>

<hr />

<table>
  <tbody>
    <tr>
      <td>計算量</td>
      <td>O(N^3)</td>
    </tr>
    <tr>
      <td>用途</td>
      <td>全点対最短路を求める</td>
    </tr>
  </tbody>
</table>

<p>N := 頂点数  </p>

<h4 id="section-1">問題</h4>

<hr />

<ul>
  <li><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0189">AOJ 0189 “Convenient Location”</a>  </li>
  <li><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0200">AOJ 0200 “Traveling Alone: One-way Ticket of Youth”</a>  </li>
  <li><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0526">AOJ 0526 “Boat Travel”</a>  </li>
  <li><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2005">AOJ 2005 “Wate Pipe Construction”</a>  </li>
  <li><a href="http://poj.org/problem?id=3615">POJ 3615 “Cow Hurdles”</a>  </li>
</ul>

<h4 id="section-2">解説</h4>

<hr />

<p>Warshall-Floyd法では, グラフ中の任意の2頂点i, j間の最短距離を求める.<br />
あるkに対して同じグラフ中の点0..kまでの中継点を使うとき(必ずしも全てを通るわけではない)の最短路が求まっている時, 次の点k+1を経由するかどうかでi, j間の最短距離を更新することができる.<br />
dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);<br />
よってkまでの頂点を中継点を使って最短路が求まっている時, k+1までの頂点を中継点とした最短路も上の更新によって求まる.<br />
当然k=0のときは明らかに求まっている.<br />
これらからkについて0からN−まで回して, その中で全ての組の最短を更新すれば全ての2点間の最短路が求まることが分かる.  </p>

<p>以上によって全点対最短路がもとまる. またWarshall-Floyd法は3重ループを回すだけで実装できるので制約が許すなら単一始点最短路を求めたいときなどでも使われる(コーディングのスピードを上げるため).</p>

<h4 id="section-3">コード</h4>

<hr />

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (warshall_floyd.cpp)</span> <a href='/downloads/code/warshall_floyd.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">dist</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">dist</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">dist</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">]</span><span class="o">+</span><span class="n">dist</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

]]></content>
  </entry>
  
</feed>
