<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TopCoder | Algoogle]]></title>
  <link href="http://algoogle.hadrori.jp/categories/topcoder/atom.xml" rel="self"/>
  <link href="http://algoogle.hadrori.jp/"/>
  <updated>2014-05-05T23:39:38+09:00</updated>
  <id>http://algoogle.hadrori.jp/</id>
  <author>
    <name><![CDATA[hadrori]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SRM 619 Div1 Easy]]></title>
    <link href="http://algoogle.hadrori.jp/TopCoder/619div1/"/>
    <updated>2014-05-05T23:29:21+09:00</updated>
    <id>http://algoogle.hadrori.jp/TopCoder/619div1</id>
    <content type="html"><![CDATA[<h4 id="section">問題概要</h4>

<hr />

<p>石が2個以上ある山を1つ選んで, 他の山2つに分ける.<br />
これを2人で交互に繰り返してできなくなった方の負け.<br />
2人が最善をつくすとき先攻の勝敗を出せ.</p>

<h4 id="section-1">解法</h4>

<hr />

<p>まず初期状態で不可能な場合は負け.<br />
その他の場合, 毎ターン山は1つ減る.<br />
また1個以上石がある2つの山に1個以上の石が加えられるので, 次の人は山が3つ以上あれば必ず少なくとも2つの山は選択できるはず.<br />
よって負ける場合は山の数が残り2つになった時なので, 初期状態の山の数の偶奇で判断できる.  </p>

<h4 id="section-2"></h4>

<hr />

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (619div1easy.cpp)</span> <a href='/downloads/code/topcoder/619div1easy.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// Paste me into the FileEdit configuration dialog</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;bitset&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cctype&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;complex&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;numeric&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stack&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="c1">//#define int long long</span>
</span><span class='line'><span class="cp">#define repi(i,a,b) for(int i = (int)a; i &lt; (int)b; i++)</span>
</span><span class='line'><span class="cp">#define rep(i,a) repi(i,0,a)</span>
</span><span class='line'><span class="cp">#define repd(i,a,b) for(int i = (int)a; i &gt;= (int)b; i--)</span>
</span><span class='line'><span class="cp">#define all(u) (u).begin(),(u).end()</span>
</span><span class='line'><span class="cp">#define rall(u) (u).rbegin(),(u).rend()</span>
</span><span class='line'><span class="cp">#define my_unique(u) (u).erase(unique(all(u)),(u).end())</span>
</span><span class='line'><span class="cp">#define dump(x) cerr &lt;&lt; #x &lt;&lt; &quot; = &quot; &lt;&lt; x &lt;&lt; endl;</span>
</span><span class='line'><span class="cp">#define pb push_back</span>
</span><span class='line'><span class="cp">#define ppb pop_back</span>
</span><span class='line'><span class="cp">#define mp make_pair</span>
</span><span class='line'><span class="cp">#define fst first</span>
</span><span class='line'><span class="cp">#define snd second</span>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">pi</span> <span class="o">=</span> <span class="n">acos</span><span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">inf</span> <span class="o">=</span> <span class="mf">1e9</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">eps</span> <span class="o">=</span> <span class="mf">1e-9</span><span class="p">;</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span> <span class="kr">inline</span> <span class="n">T</span> <span class="n">sq</span><span class="p">(</span><span class="n">T</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="p">;}</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span> <span class="kr">inline</span> <span class="n">T</span> <span class="n">mypow</span><span class="p">(</span><span class="n">T</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">e</span> <span class="o">==</span> <span class="mi">0</span><span class="o">?</span> <span class="mi">1</span><span class="o">:</span> <span class="n">e</span><span class="o">%</span><span class="mi">2</span><span class="o">?</span> <span class="n">x</span> <span class="o">*</span> <span class="n">pow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">e</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span> <span class="n">pow</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="p">,</span><span class="n">e</span><span class="o">/</span><span class="mi">2</span><span class="p">);}</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">chmax</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="n">T</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span><span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="o">-</span> <span class="n">eps</span><span class="p">)</span> <span class="n">x</span> <span class="o">=</span> <span class="n">y</span><span class="p">;}</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="n">chmin</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="n">T</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span> <span class="o">+</span> <span class="n">eps</span><span class="p">)</span> <span class="n">x</span> <span class="o">=</span> <span class="n">y</span><span class="p">;}</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">bool</span> <span class="n">eq</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="kt">double</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">abs</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">y</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">eps</span><span class="p">;}</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">int</span> <span class="n">pow2</span><span class="p">(</span><span class="kt">int</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1LL</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">;}</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">int</span> <span class="n">lcm</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span> <span class="o">/</span> <span class="n">__gcd</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">);}</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">signed</span> <span class="n">to_int</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">atoi</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">c_str</span><span class="p">());}</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">int</span> <span class="n">to_long</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">){</span>
</span><span class='line'>    <span class="n">stringstream</span> <span class="n">ss</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ss</span> <span class="o">&gt;&gt;</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vi</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vi</span><span class="o">&gt;</span> <span class="n">vvi</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pii</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">complex</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">point</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">point</span><span class="o">&gt;</span> <span class="n">graph</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">int</span> <span class="n">Number</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Number</span><span class="o">&gt;</span> <span class="n">Array</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Array</span><span class="o">&gt;</span> <span class="n">Matrix</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 4 directions</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">di</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">dj</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">};</span>
</span><span class='line'><span class="c1">// 8 directions</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">ddi</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">ddj</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">};</span>
</span><span class='line'><span class="kt">int</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">;</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">bool</span> <span class="n">inrange</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">w</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">h</span><span class="p">;}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SplitStoneGame</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">win</span> <span class="o">=</span> <span class="s">&quot;WIN&quot;</span><span class="p">,</span> <span class="n">lose</span> <span class="o">=</span> <span class="s">&quot;LOSE&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">winOrLose</span><span class="p">(</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">number</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="n">number</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">rep</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">n</span><span class="p">)</span> <span class="k">if</span><span class="p">(</span><span class="n">number</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">cnt</span> <span class="o">==</span> <span class="mi">0</span> <span class="n">or</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="k">return</span> <span class="n">lose</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">%</span><span class="mi">2</span><span class="p">)</span> <span class="k">return</span> <span class="n">win</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">lose</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// BEGIN CUT HERE</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;ctime&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="k">namespace</span> <span class="n">moj_harness</span> <span class="p">{</span>
</span><span class='line'>	<span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">;</span>
</span><span class='line'>	<span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="p">;</span>
</span><span class='line'>	<span class="kt">int</span> <span class="n">run_test_case</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>	<span class="kt">void</span> <span class="n">run_test</span><span class="p">(</span><span class="kt">int</span> <span class="n">casenum</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">quiet</span> <span class="o">=</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="k">if</span> <span class="p">(</span><span class="n">casenum</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="k">if</span> <span class="p">(</span><span class="n">run_test_case</span><span class="p">(</span><span class="n">casenum</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">quiet</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>				<span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Illegal input! Test case &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">casenum</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; does not exist.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>			<span class="k">return</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		
</span><span class='line'>		<span class="kt">int</span> <span class="n">correct</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">run_test_case</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>			<span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>				<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">100</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>				<span class="k">continue</span><span class="p">;</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>			<span class="n">correct</span> <span class="o">+=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>			<span class="o">++</span><span class="n">total</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">if</span> <span class="p">(</span><span class="n">total</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;No test cases run.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">correct</span> <span class="o">&lt;</span> <span class="n">total</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Some cases FAILED (passed &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">correct</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; of &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">total</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;).&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>			<span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;All &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">total</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; tests passed!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kt">int</span> <span class="n">verify_case</span><span class="p">(</span><span class="kt">int</span> <span class="n">casenum</span><span class="p">,</span> <span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">expected</span><span class="p">,</span> <span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">received</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">clock_t</span> <span class="n">elapsed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Example &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">casenum</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;... &quot;</span><span class="p">;</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">string</span> <span class="n">verdict</span><span class="p">;</span>
</span><span class='line'>		<span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">info</span><span class="p">;</span>
</span><span class='line'>		<span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">if</span> <span class="p">(</span><span class="n">elapsed</span> <span class="o">&gt;</span> <span class="n">CLOCKS_PER_SEC</span> <span class="o">/</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="n">std</span><span class="o">::</span><span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;time %.2fs&quot;</span><span class="p">,</span> <span class="n">elapsed</span> <span class="o">*</span> <span class="p">(</span><span class="mf">1.0</span><span class="o">/</span><span class="n">CLOCKS_PER_SEC</span><span class="p">));</span>
</span><span class='line'>			<span class="n">info</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">if</span> <span class="p">(</span><span class="n">expected</span> <span class="o">==</span> <span class="n">received</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="n">verdict</span> <span class="o">=</span> <span class="s">&quot;PASSED&quot;</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>			<span class="n">verdict</span> <span class="o">=</span> <span class="s">&quot;FAILED&quot;</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">verdict</span><span class="p">;</span>
</span><span class='line'>		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">info</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>			<span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; (&quot;</span><span class="p">;</span>
</span><span class='line'>			<span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">info</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>				<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>				<span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">info</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>			<span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;)&quot;</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		<span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">if</span> <span class="p">(</span><span class="n">verdict</span> <span class="o">==</span> <span class="s">&quot;FAILED&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;    Expected: </span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">expected</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>			<span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;    Received: </span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">received</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">return</span> <span class="n">verdict</span> <span class="o">==</span> <span class="s">&quot;PASSED&quot;</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="kt">int</span> <span class="n">run_test_case</span><span class="p">(</span><span class="kt">int</span> <span class="n">casenum__</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="k">switch</span> <span class="p">(</span><span class="n">casenum__</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="k">case</span> <span class="mi">0</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="kt">int</span> <span class="n">number</span><span class="p">[]</span>              <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">};</span>
</span><span class='line'>			<span class="n">string</span> <span class="n">expected__</span>         <span class="o">=</span> <span class="s">&quot;LOSE&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>			<span class="n">std</span><span class="o">::</span><span class="n">clock_t</span> <span class="n">start__</span>      <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">clock</span><span class="p">();</span>
</span><span class='line'>			<span class="n">string</span> <span class="n">received__</span>         <span class="o">=</span> <span class="n">SplitStoneGame</span><span class="p">().</span><span class="n">winOrLose</span><span class="p">(</span><span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">number</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span> <span class="n">number</span> <span class="o">/</span> <span class="k">sizeof</span> <span class="n">number</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span>
</span><span class='line'>			<span class="k">return</span> <span class="n">verify_case</span><span class="p">(</span><span class="n">casenum__</span><span class="p">,</span> <span class="n">expected__</span><span class="p">,</span> <span class="n">received__</span><span class="p">,</span> <span class="n">clock</span><span class="p">()</span><span class="o">-</span><span class="n">start__</span><span class="p">);</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		<span class="k">case</span> <span class="mi">1</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="kt">int</span> <span class="n">number</span><span class="p">[]</span>              <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">};</span>
</span><span class='line'>			<span class="n">string</span> <span class="n">expected__</span>         <span class="o">=</span> <span class="s">&quot;LOSE&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>			<span class="n">std</span><span class="o">::</span><span class="n">clock_t</span> <span class="n">start__</span>      <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">clock</span><span class="p">();</span>
</span><span class='line'>			<span class="n">string</span> <span class="n">received__</span>         <span class="o">=</span> <span class="n">SplitStoneGame</span><span class="p">().</span><span class="n">winOrLose</span><span class="p">(</span><span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">number</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span> <span class="n">number</span> <span class="o">/</span> <span class="k">sizeof</span> <span class="n">number</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span>
</span><span class='line'>			<span class="k">return</span> <span class="n">verify_case</span><span class="p">(</span><span class="n">casenum__</span><span class="p">,</span> <span class="n">expected__</span><span class="p">,</span> <span class="n">received__</span><span class="p">,</span> <span class="n">clock</span><span class="p">()</span><span class="o">-</span><span class="n">start__</span><span class="p">);</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		<span class="k">case</span> <span class="mi">2</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="kt">int</span> <span class="n">number</span><span class="p">[]</span>              <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">};</span>
</span><span class='line'>			<span class="n">string</span> <span class="n">expected__</span>         <span class="o">=</span> <span class="s">&quot;WIN&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>			<span class="n">std</span><span class="o">::</span><span class="n">clock_t</span> <span class="n">start__</span>      <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">clock</span><span class="p">();</span>
</span><span class='line'>			<span class="n">string</span> <span class="n">received__</span>         <span class="o">=</span> <span class="n">SplitStoneGame</span><span class="p">().</span><span class="n">winOrLose</span><span class="p">(</span><span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">number</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span> <span class="n">number</span> <span class="o">/</span> <span class="k">sizeof</span> <span class="n">number</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span>
</span><span class='line'>			<span class="k">return</span> <span class="n">verify_case</span><span class="p">(</span><span class="n">casenum__</span><span class="p">,</span> <span class="n">expected__</span><span class="p">,</span> <span class="n">received__</span><span class="p">,</span> <span class="n">clock</span><span class="p">()</span><span class="o">-</span><span class="n">start__</span><span class="p">);</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		<span class="k">case</span> <span class="mi">3</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="kt">int</span> <span class="n">number</span><span class="p">[]</span>              <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">};</span>
</span><span class='line'>			<span class="n">string</span> <span class="n">expected__</span>         <span class="o">=</span> <span class="s">&quot;WIN&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>			<span class="n">std</span><span class="o">::</span><span class="n">clock_t</span> <span class="n">start__</span>      <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">clock</span><span class="p">();</span>
</span><span class='line'>			<span class="n">string</span> <span class="n">received__</span>         <span class="o">=</span> <span class="n">SplitStoneGame</span><span class="p">().</span><span class="n">winOrLose</span><span class="p">(</span><span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">number</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span> <span class="n">number</span> <span class="o">/</span> <span class="k">sizeof</span> <span class="n">number</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span>
</span><span class='line'>			<span class="k">return</span> <span class="n">verify_case</span><span class="p">(</span><span class="n">casenum__</span><span class="p">,</span> <span class="n">expected__</span><span class="p">,</span> <span class="n">received__</span><span class="p">,</span> <span class="n">clock</span><span class="p">()</span><span class="o">-</span><span class="n">start__</span><span class="p">);</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		<span class="k">case</span> <span class="mi">4</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="kt">int</span> <span class="n">number</span><span class="p">[]</span>              <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">};</span>
</span><span class='line'>			<span class="n">string</span> <span class="n">expected__</span>         <span class="o">=</span> <span class="s">&quot;LOSE&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>			<span class="n">std</span><span class="o">::</span><span class="n">clock_t</span> <span class="n">start__</span>      <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">clock</span><span class="p">();</span>
</span><span class='line'>			<span class="n">string</span> <span class="n">received__</span>         <span class="o">=</span> <span class="n">SplitStoneGame</span><span class="p">().</span><span class="n">winOrLose</span><span class="p">(</span><span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">number</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span> <span class="n">number</span> <span class="o">/</span> <span class="k">sizeof</span> <span class="n">number</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span>
</span><span class='line'>			<span class="k">return</span> <span class="n">verify_case</span><span class="p">(</span><span class="n">casenum__</span><span class="p">,</span> <span class="n">expected__</span><span class="p">,</span> <span class="n">received__</span><span class="p">,</span> <span class="n">clock</span><span class="p">()</span><span class="o">-</span><span class="n">start__</span><span class="p">);</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>		<span class="c1">// custom cases</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">case</span> <span class="mi">5</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">number</span><span class="p">[]</span>              <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">};</span>
</span><span class='line'>			<span class="n">string</span> <span class="n">expected__</span>         <span class="o">=</span> <span class="s">&quot;LOSE&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>			<span class="n">std</span><span class="o">::</span><span class="n">clock_t</span> <span class="n">start__</span>      <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">clock</span><span class="p">();</span>
</span><span class='line'>			<span class="n">string</span> <span class="n">received__</span>         <span class="o">=</span> <span class="n">SplitStoneGame</span><span class="p">().</span><span class="n">winOrLose</span><span class="p">(</span><span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">number</span> <span class="o">+</span> <span class="p">(</span><span class="k">sizeof</span> <span class="n">number</span> <span class="o">/</span> <span class="k">sizeof</span> <span class="n">number</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span>
</span><span class='line'>			<span class="k">return</span> <span class="n">verify_case</span><span class="p">(</span><span class="n">casenum__</span><span class="p">,</span> <span class="n">expected__</span><span class="p">,</span> <span class="n">received__</span><span class="p">,</span> <span class="n">clock</span><span class="p">()</span><span class="o">-</span><span class="n">start__</span><span class="p">);</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'><span class="cm">/*      case 6: {</span>
</span><span class='line'><span class="cm">			int number[]              = ;</span>
</span><span class='line'><span class="cm">			string expected__         = ;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">			std::clock_t start__      = std::clock();</span>
</span><span class='line'><span class="cm">			string received__         = SplitStoneGame().winOrLose(vector &lt;int&gt;(number, number + (sizeof number / sizeof number[0])));</span>
</span><span class='line'><span class="cm">			return verify_case(casenum__, expected__, received__, clock()-start__);</span>
</span><span class='line'><span class="cm">		}*/</span>
</span><span class='line'><span class="cm">/*      case 7: {</span>
</span><span class='line'><span class="cm">			int number[]              = ;</span>
</span><span class='line'><span class="cm">			string expected__         = ;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">			std::clock_t start__      = std::clock();</span>
</span><span class='line'><span class="cm">			string received__         = SplitStoneGame().winOrLose(vector &lt;int&gt;(number, number + (sizeof number / sizeof number[0])));</span>
</span><span class='line'><span class="cm">			return verify_case(casenum__, expected__, received__, clock()-start__);</span>
</span><span class='line'><span class="cm">		}*/</span>
</span><span class='line'>		<span class="k">default</span><span class="o">:</span>
</span><span class='line'>			<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="n">moj_harness</span><span class="o">::</span><span class="n">run_test</span><span class="p">();</span>
</span><span class='line'>	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">argc</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>			<span class="n">moj_harness</span><span class="o">::</span><span class="n">run_test</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// END CUT HERE</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

]]></content>
  </entry>
  
</feed>
