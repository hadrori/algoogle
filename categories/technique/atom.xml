<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Technique | Algoogle]]></title>
  <link href="http://algoogle.hadrori.jp/categories/technique/atom.xml" rel="self"/>
  <link href="http://algoogle.hadrori.jp/"/>
  <updated>2014-04-29T16:32:53+09:00</updated>
  <id>http://algoogle.hadrori.jp/</id>
  <author>
    <name><![CDATA[hadrori]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[座標圧縮]]></title>
    <link href="http://algoogle.hadrori.jp/compress/"/>
    <updated>2014-04-29T00:00:00+09:00</updated>
    <id>http://algoogle.hadrori.jp/compress</id>
    <content type="html"><![CDATA[<h4 id="section">基本情報</h4>

<hr />

<table>
  <tbody>
    <tr>
      <td>計算量</td>
      <td>初期化 O(N log N), 圧縮 O(log N), 展開 O(1)</td>
    </tr>
    <tr>
      <td>用途</td>
      <td>座標を圧縮する</td>
    </tr>
  </tbody>
</table>

<p>N := 圧縮する座標の数  </p>

<h4 id="section-1">問題</h4>

<hr />

<ul>
  <li><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1337">AOJ 1337 “Count the Regions”</a>  </li>
  <li><a href="http://poj.org/problem?id=2430">POJ 2430 “Lazy Cow”</a>  </li>
  <li><a href="http://poj.org/problem?id=3666">POJ 3666 “Making the Grade”</a>  </li>
</ul>

<h4 id="section-2">解説</h4>

<hr />

<p>入力の個数に対して考えられる座標の範囲が広い時, 座標の大小関係を維持しつつ値の範囲を狭める.<br />
コードではzipで圧縮後の座標, unzipで圧縮前の座標を受け取る.  </p>

<h4 id="section-3">コード</h4>

<hr />

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (compress.cpp)</span> <a href='/downloads/code/compress.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">zip</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">unzip</span><span class="p">[</span><span class="n">MAP</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">compress</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">){</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">x</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>    <span class="n">x</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">unique</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">x</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span><span class="n">x</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">zip</span><span class="p">[</span><span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="n">unzip</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

]]></content>
  </entry>
  
</feed>
